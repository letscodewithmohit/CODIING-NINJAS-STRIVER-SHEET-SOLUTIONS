/**brust force**/
// bool LS(vector<int>&a,int x){
//     int n = a.size();
//     for(int i=0; i<n; i++){
//         if(a[i]==x){
//          return true;
//         }
//     }
//     return false;
// }
// int longestSuccessiveElements(vector<int>&a) {

//     // Write your code here.
//     int n = a.size();
//     int largest = 1;
//     for(int i=0; i<n; i++){
//         int x = a[i];
//         int count =1;
//         while(LS(a,x+1)==true){
//             x=x+1;
//             count++;
//         }
//         largest = max(largest,count);
//     }
//     return largest;
// }
/**better**/
// int longestSuccessiveElements(vector<int>&a) {
//  sort(a.begin(),a.end());
//         int n = a.size();
//         int largest = 1;
//         int last_smallest = INT_MIN;
//         int count = 0;
//         for(int i=0; i<n; i++){
//             if(a[i]-1 == last_smallest){
//             count++;
//             last_smallest = a[i];
//             } else if (a[i] != last_smallest) {
//             count = 1;
//             last_smallest = a[i];
//             }
//             largest = max(count, largest);
//         }
//         return largest;
// }

int longestSuccessiveElements(vector<int> &a) {
    int n = a.size();
    if(n == 0){
        return 0;
    }

    int largest = 1;
    int count = 0;

    unordered_set<int>st;

    for(int i=0; i<n; i++){
        st.insert(a[i]);
    }

    for(auto it : st){
        if(st.find(it-1)==st.end()){
            count = 1;
            int  x = it;//we find the start point
            while(st.find(x+1) != st.end()){
                count++;
                x++;
            }
            largest = max(largest,count);
        }
    }
    return largest;
}
