
int longestSubarrayWithSumK(vector<int> a, long long target) {
    // Write your code here
    
    // int n = a.size();
    // int max_len = -1;
    // for(int i=0; i<n; i++){
    //     for(int j=i; j<n; j++){
    //        long long  sum = 0;
    //        for(int k=i; k<=j; k++){
    //            sum+= a[k];
    //            if (sum == target) {
    //             int len = k - i + 1;
    //              max_len = max(len, max_len);
    //            }
    //        }
    //     }
    // }
    //     return max_len;

    // int n = a.size();
    // int max_len = -1;
    // for(int i=0; i<n; i++){
    //     long long sum = 0;
    //     for(int j=i; j<n; j++){
    //         sum += a[j];
    //         if(sum == target){
    //             int len = j-i+1;
    //             max_len = max(len,max_len);
    //         }
    //     }
    // }
    // return max_len;

/*two pointer*/

int n = a.size();
int max_len = -1;
long long sum = 0;
int left = 0;
int right = -1;

while(right < n){
    if(sum == target){
    int len = right - left + 1;
    max_len = max(max_len,len);
    }
    else if(sum > target){
    sum -= a[left];
    left++;
        continue;
    }
        right++;
        sum += a[right];
}
return max_len;
 
}
